// Code generated by protoc-gen-go. DO NOT EDIT.
// source: server.proto

/*
Package server is a generated protocol buffer package.

It is generated from these files:
	server.proto

It has these top-level messages:
	SctID
*/
package server

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import snomed "github.com/wardle/go-terminology/snomed"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type SctID struct {
	Identifier int64 `protobuf:"varint,1,opt,name=identifier" json:"identifier,omitempty"`
}

func (m *SctID) Reset()                    { *m = SctID{} }
func (m *SctID) String() string            { return proto.CompactTextString(m) }
func (*SctID) ProtoMessage()               {}
func (*SctID) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *SctID) GetIdentifier() int64 {
	if m != nil {
		return m.Identifier
	}
	return 0
}

func init() {
	proto.RegisterType((*SctID)(nil), "server.SctID")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for SnomedCT service

type SnomedCTClient interface {
	GetConcept(ctx context.Context, in *SctID, opts ...grpc.CallOption) (*snomed.Concept, error)
}

type snomedCTClient struct {
	cc *grpc.ClientConn
}

func NewSnomedCTClient(cc *grpc.ClientConn) SnomedCTClient {
	return &snomedCTClient{cc}
}

func (c *snomedCTClient) GetConcept(ctx context.Context, in *SctID, opts ...grpc.CallOption) (*snomed.Concept, error) {
	out := new(snomed.Concept)
	err := grpc.Invoke(ctx, "/server.SnomedCT/GetConcept", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SnomedCT service

type SnomedCTServer interface {
	GetConcept(context.Context, *SctID) (*snomed.Concept, error)
}

func RegisterSnomedCTServer(s *grpc.Server, srv SnomedCTServer) {
	s.RegisterService(&_SnomedCT_serviceDesc, srv)
}

func _SnomedCT_GetConcept_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SctID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnomedCTServer).GetConcept(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.SnomedCT/GetConcept",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnomedCTServer).GetConcept(ctx, req.(*SctID))
	}
	return interceptor(ctx, in, info, handler)
}

var _SnomedCT_serviceDesc = grpc.ServiceDesc{
	ServiceName: "server.SnomedCT",
	HandlerType: (*SnomedCTServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetConcept",
			Handler:    _SnomedCT_GetConcept_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "server.proto",
}

func init() { proto.RegisterFile("server.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 129 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x29, 0x4e, 0x2d, 0x2a,
	0x4b, 0x2d, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x83, 0xf0, 0xa4, 0x84, 0x8b, 0xf3,
	0xf2, 0x73, 0x53, 0x53, 0xf4, 0x21, 0x14, 0x44, 0x52, 0x49, 0x9d, 0x8b, 0x35, 0x38, 0xb9, 0xc4,
	0xd3, 0x45, 0x48, 0x8e, 0x8b, 0x2b, 0x33, 0x25, 0x35, 0xaf, 0x24, 0x33, 0x2d, 0x33, 0xb5, 0x48,
	0x82, 0x51, 0x81, 0x51, 0x83, 0x39, 0x08, 0x49, 0xc4, 0xc8, 0x82, 0x8b, 0x23, 0x18, 0xac, 0xd1,
	0x39, 0x44, 0x48, 0x87, 0x8b, 0xcb, 0x3d, 0xb5, 0xc4, 0x39, 0x3f, 0x2f, 0x39, 0xb5, 0xa0, 0x44,
	0x88, 0x57, 0x0f, 0x6a, 0x1d, 0xd8, 0x20, 0x29, 0x7e, 0x3d, 0xa8, 0x05, 0x50, 0xf9, 0x24, 0x36,
	0xb0, 0x4d, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0x0c, 0x31, 0xbd, 0x10, 0x96, 0x00, 0x00,
	0x00,
}
