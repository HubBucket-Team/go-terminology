// Code generated by protoc-gen-go. DO NOT EDIT.
// source: server.proto

package snomed

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type SctID struct {
	Identifier           int64    `protobuf:"varint,1,opt,name=identifier,proto3" json:"identifier,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SctID) Reset()         { *m = SctID{} }
func (m *SctID) String() string { return proto.CompactTextString(m) }
func (*SctID) ProtoMessage()    {}
func (*SctID) Descriptor() ([]byte, []int) {
	return fileDescriptor_server_3c3b878a959306ae, []int{0}
}
func (m *SctID) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SctID.Unmarshal(m, b)
}
func (m *SctID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SctID.Marshal(b, m, deterministic)
}
func (dst *SctID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SctID.Merge(dst, src)
}
func (m *SctID) XXX_Size() int {
	return xxx_messageInfo_SctID.Size(m)
}
func (m *SctID) XXX_DiscardUnknown() {
	xxx_messageInfo_SctID.DiscardUnknown(m)
}

var xxx_messageInfo_SctID proto.InternalMessageInfo

func (m *SctID) GetIdentifier() int64 {
	if m != nil {
		return m.Identifier
	}
	return 0
}

type ReferenceSetItemID struct {
	Identifier           string   `protobuf:"bytes,1,opt,name=identifier,proto3" json:"identifier,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReferenceSetItemID) Reset()         { *m = ReferenceSetItemID{} }
func (m *ReferenceSetItemID) String() string { return proto.CompactTextString(m) }
func (*ReferenceSetItemID) ProtoMessage()    {}
func (*ReferenceSetItemID) Descriptor() ([]byte, []int) {
	return fileDescriptor_server_3c3b878a959306ae, []int{1}
}
func (m *ReferenceSetItemID) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReferenceSetItemID.Unmarshal(m, b)
}
func (m *ReferenceSetItemID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReferenceSetItemID.Marshal(b, m, deterministic)
}
func (dst *ReferenceSetItemID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReferenceSetItemID.Merge(dst, src)
}
func (m *ReferenceSetItemID) XXX_Size() int {
	return xxx_messageInfo_ReferenceSetItemID.Size(m)
}
func (m *ReferenceSetItemID) XXX_DiscardUnknown() {
	xxx_messageInfo_ReferenceSetItemID.DiscardUnknown(m)
}

var xxx_messageInfo_ReferenceSetItemID proto.InternalMessageInfo

func (m *ReferenceSetItemID) GetIdentifier() string {
	if m != nil {
		return m.Identifier
	}
	return ""
}

func init() {
	proto.RegisterType((*SctID)(nil), "snomed.SctID")
	proto.RegisterType((*ReferenceSetItemID)(nil), "snomed.ReferenceSetItemID")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SnomedCTClient is the client API for SnomedCT service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SnomedCTClient interface {
	GetConcept(ctx context.Context, in *SctID, opts ...grpc.CallOption) (*Concept, error)
	// GetExtendedConcept returns the concept with the specified identifier.
	// The preferred description will be determined by language preferences
	// defined at runtime.
	// For example, the header accept-language may be used to define language preferences
	// using tags as per format defined by IETF (http://www.ietf.org/rfc/rfc2616.txt)
	// or by setting at a server-wide basis.
	GetExtendedConcept(ctx context.Context, in *SctID, opts ...grpc.CallOption) (*ExtendedConcept, error)
	// GetDescriptions returns descriptions for a given concept.
	GetDescriptions(ctx context.Context, in *SctID, opts ...grpc.CallOption) (*ConceptDescriptions, error)
	// GetReferenceSets returns the reference sets to which this concept is a member
	GetReferenceSets(ctx context.Context, in *SctID, opts ...grpc.CallOption) (SnomedCT_GetReferenceSetsClient, error)
	// GetAllChildren returns all children of the specified concept
	GetAllChildren(ctx context.Context, in *SctID, opts ...grpc.CallOption) (SnomedCT_GetAllChildrenClient, error)
	// GetDescription returns a single description, by identifier
	GetDescription(ctx context.Context, in *SctID, opts ...grpc.CallOption) (*Description, error)
	// GetReferenceSetItem returns a single item from a reference set, by identifier
	GetReferenceSetItem(ctx context.Context, in *ReferenceSetItemID, opts ...grpc.CallOption) (*ReferenceSetItem, error)
	// CrossMap translates from SNOMED CT to an alternative coding system via a map reference set
	CrossMap(ctx context.Context, in *TranslateToRequest, opts ...grpc.CallOption) (SnomedCT_CrossMapClient, error)
	// FromCrossMap translates from an external coding system to SNOMED-CT.
	FromCrossMap(ctx context.Context, in *TranslateFromRequest, opts ...grpc.CallOption) (*TranslateFromResponse, error)
	// Map translates a SNOMED CT concept into the best match within the specified reference set
	Map(ctx context.Context, in *TranslateToRequest, opts ...grpc.CallOption) (*Concept, error)
	// Subsumes determines whether one concept subsumes another
	// This is an implementation of the HL7 FHIR terminology service subsumes method
	// (https://www.hl7.org/fhir/terminology-service.html)
	Subsumes(ctx context.Context, in *SubsumptionRequest, opts ...grpc.CallOption) (*SubsumptionResponse, error)
	// Parse parses a SNOMED expression (compositional grammar)
	Parse(ctx context.Context, in *ParseRequest, opts ...grpc.CallOption) (*Expression, error)
	// Refinements returns the appropriate refinements for this specified concept
	Refinements(ctx context.Context, in *RefinementRequest, opts ...grpc.CallOption) (*RefinementResponse, error)
}

type snomedCTClient struct {
	cc *grpc.ClientConn
}

func NewSnomedCTClient(cc *grpc.ClientConn) SnomedCTClient {
	return &snomedCTClient{cc}
}

func (c *snomedCTClient) GetConcept(ctx context.Context, in *SctID, opts ...grpc.CallOption) (*Concept, error) {
	out := new(Concept)
	err := c.cc.Invoke(ctx, "/snomed.SnomedCT/GetConcept", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snomedCTClient) GetExtendedConcept(ctx context.Context, in *SctID, opts ...grpc.CallOption) (*ExtendedConcept, error) {
	out := new(ExtendedConcept)
	err := c.cc.Invoke(ctx, "/snomed.SnomedCT/GetExtendedConcept", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snomedCTClient) GetDescriptions(ctx context.Context, in *SctID, opts ...grpc.CallOption) (*ConceptDescriptions, error) {
	out := new(ConceptDescriptions)
	err := c.cc.Invoke(ctx, "/snomed.SnomedCT/GetDescriptions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snomedCTClient) GetReferenceSets(ctx context.Context, in *SctID, opts ...grpc.CallOption) (SnomedCT_GetReferenceSetsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_SnomedCT_serviceDesc.Streams[0], "/snomed.SnomedCT/GetReferenceSets", opts...)
	if err != nil {
		return nil, err
	}
	x := &snomedCTGetReferenceSetsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SnomedCT_GetReferenceSetsClient interface {
	Recv() (*ReferenceSetItem, error)
	grpc.ClientStream
}

type snomedCTGetReferenceSetsClient struct {
	grpc.ClientStream
}

func (x *snomedCTGetReferenceSetsClient) Recv() (*ReferenceSetItem, error) {
	m := new(ReferenceSetItem)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *snomedCTClient) GetAllChildren(ctx context.Context, in *SctID, opts ...grpc.CallOption) (SnomedCT_GetAllChildrenClient, error) {
	stream, err := c.cc.NewStream(ctx, &_SnomedCT_serviceDesc.Streams[1], "/snomed.SnomedCT/GetAllChildren", opts...)
	if err != nil {
		return nil, err
	}
	x := &snomedCTGetAllChildrenClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SnomedCT_GetAllChildrenClient interface {
	Recv() (*ConceptReference, error)
	grpc.ClientStream
}

type snomedCTGetAllChildrenClient struct {
	grpc.ClientStream
}

func (x *snomedCTGetAllChildrenClient) Recv() (*ConceptReference, error) {
	m := new(ConceptReference)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *snomedCTClient) GetDescription(ctx context.Context, in *SctID, opts ...grpc.CallOption) (*Description, error) {
	out := new(Description)
	err := c.cc.Invoke(ctx, "/snomed.SnomedCT/GetDescription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snomedCTClient) GetReferenceSetItem(ctx context.Context, in *ReferenceSetItemID, opts ...grpc.CallOption) (*ReferenceSetItem, error) {
	out := new(ReferenceSetItem)
	err := c.cc.Invoke(ctx, "/snomed.SnomedCT/GetReferenceSetItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snomedCTClient) CrossMap(ctx context.Context, in *TranslateToRequest, opts ...grpc.CallOption) (SnomedCT_CrossMapClient, error) {
	stream, err := c.cc.NewStream(ctx, &_SnomedCT_serviceDesc.Streams[2], "/snomed.SnomedCT/CrossMap", opts...)
	if err != nil {
		return nil, err
	}
	x := &snomedCTCrossMapClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SnomedCT_CrossMapClient interface {
	Recv() (*ReferenceSetItem, error)
	grpc.ClientStream
}

type snomedCTCrossMapClient struct {
	grpc.ClientStream
}

func (x *snomedCTCrossMapClient) Recv() (*ReferenceSetItem, error) {
	m := new(ReferenceSetItem)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *snomedCTClient) FromCrossMap(ctx context.Context, in *TranslateFromRequest, opts ...grpc.CallOption) (*TranslateFromResponse, error) {
	out := new(TranslateFromResponse)
	err := c.cc.Invoke(ctx, "/snomed.SnomedCT/FromCrossMap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snomedCTClient) Map(ctx context.Context, in *TranslateToRequest, opts ...grpc.CallOption) (*Concept, error) {
	out := new(Concept)
	err := c.cc.Invoke(ctx, "/snomed.SnomedCT/Map", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snomedCTClient) Subsumes(ctx context.Context, in *SubsumptionRequest, opts ...grpc.CallOption) (*SubsumptionResponse, error) {
	out := new(SubsumptionResponse)
	err := c.cc.Invoke(ctx, "/snomed.SnomedCT/Subsumes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snomedCTClient) Parse(ctx context.Context, in *ParseRequest, opts ...grpc.CallOption) (*Expression, error) {
	out := new(Expression)
	err := c.cc.Invoke(ctx, "/snomed.SnomedCT/Parse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snomedCTClient) Refinements(ctx context.Context, in *RefinementRequest, opts ...grpc.CallOption) (*RefinementResponse, error) {
	out := new(RefinementResponse)
	err := c.cc.Invoke(ctx, "/snomed.SnomedCT/Refinements", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SnomedCTServer is the server API for SnomedCT service.
type SnomedCTServer interface {
	GetConcept(context.Context, *SctID) (*Concept, error)
	// GetExtendedConcept returns the concept with the specified identifier.
	// The preferred description will be determined by language preferences
	// defined at runtime.
	// For example, the header accept-language may be used to define language preferences
	// using tags as per format defined by IETF (http://www.ietf.org/rfc/rfc2616.txt)
	// or by setting at a server-wide basis.
	GetExtendedConcept(context.Context, *SctID) (*ExtendedConcept, error)
	// GetDescriptions returns descriptions for a given concept.
	GetDescriptions(context.Context, *SctID) (*ConceptDescriptions, error)
	// GetReferenceSets returns the reference sets to which this concept is a member
	GetReferenceSets(*SctID, SnomedCT_GetReferenceSetsServer) error
	// GetAllChildren returns all children of the specified concept
	GetAllChildren(*SctID, SnomedCT_GetAllChildrenServer) error
	// GetDescription returns a single description, by identifier
	GetDescription(context.Context, *SctID) (*Description, error)
	// GetReferenceSetItem returns a single item from a reference set, by identifier
	GetReferenceSetItem(context.Context, *ReferenceSetItemID) (*ReferenceSetItem, error)
	// CrossMap translates from SNOMED CT to an alternative coding system via a map reference set
	CrossMap(*TranslateToRequest, SnomedCT_CrossMapServer) error
	// FromCrossMap translates from an external coding system to SNOMED-CT.
	FromCrossMap(context.Context, *TranslateFromRequest) (*TranslateFromResponse, error)
	// Map translates a SNOMED CT concept into the best match within the specified reference set
	Map(context.Context, *TranslateToRequest) (*Concept, error)
	// Subsumes determines whether one concept subsumes another
	// This is an implementation of the HL7 FHIR terminology service subsumes method
	// (https://www.hl7.org/fhir/terminology-service.html)
	Subsumes(context.Context, *SubsumptionRequest) (*SubsumptionResponse, error)
	// Parse parses a SNOMED expression (compositional grammar)
	Parse(context.Context, *ParseRequest) (*Expression, error)
	// Refinements returns the appropriate refinements for this specified concept
	Refinements(context.Context, *RefinementRequest) (*RefinementResponse, error)
}

func RegisterSnomedCTServer(s *grpc.Server, srv SnomedCTServer) {
	s.RegisterService(&_SnomedCT_serviceDesc, srv)
}

func _SnomedCT_GetConcept_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SctID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnomedCTServer).GetConcept(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/snomed.SnomedCT/GetConcept",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnomedCTServer).GetConcept(ctx, req.(*SctID))
	}
	return interceptor(ctx, in, info, handler)
}

func _SnomedCT_GetExtendedConcept_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SctID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnomedCTServer).GetExtendedConcept(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/snomed.SnomedCT/GetExtendedConcept",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnomedCTServer).GetExtendedConcept(ctx, req.(*SctID))
	}
	return interceptor(ctx, in, info, handler)
}

func _SnomedCT_GetDescriptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SctID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnomedCTServer).GetDescriptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/snomed.SnomedCT/GetDescriptions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnomedCTServer).GetDescriptions(ctx, req.(*SctID))
	}
	return interceptor(ctx, in, info, handler)
}

func _SnomedCT_GetReferenceSets_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SctID)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SnomedCTServer).GetReferenceSets(m, &snomedCTGetReferenceSetsServer{stream})
}

type SnomedCT_GetReferenceSetsServer interface {
	Send(*ReferenceSetItem) error
	grpc.ServerStream
}

type snomedCTGetReferenceSetsServer struct {
	grpc.ServerStream
}

func (x *snomedCTGetReferenceSetsServer) Send(m *ReferenceSetItem) error {
	return x.ServerStream.SendMsg(m)
}

func _SnomedCT_GetAllChildren_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SctID)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SnomedCTServer).GetAllChildren(m, &snomedCTGetAllChildrenServer{stream})
}

type SnomedCT_GetAllChildrenServer interface {
	Send(*ConceptReference) error
	grpc.ServerStream
}

type snomedCTGetAllChildrenServer struct {
	grpc.ServerStream
}

func (x *snomedCTGetAllChildrenServer) Send(m *ConceptReference) error {
	return x.ServerStream.SendMsg(m)
}

func _SnomedCT_GetDescription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SctID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnomedCTServer).GetDescription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/snomed.SnomedCT/GetDescription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnomedCTServer).GetDescription(ctx, req.(*SctID))
	}
	return interceptor(ctx, in, info, handler)
}

func _SnomedCT_GetReferenceSetItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReferenceSetItemID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnomedCTServer).GetReferenceSetItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/snomed.SnomedCT/GetReferenceSetItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnomedCTServer).GetReferenceSetItem(ctx, req.(*ReferenceSetItemID))
	}
	return interceptor(ctx, in, info, handler)
}

func _SnomedCT_CrossMap_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TranslateToRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SnomedCTServer).CrossMap(m, &snomedCTCrossMapServer{stream})
}

type SnomedCT_CrossMapServer interface {
	Send(*ReferenceSetItem) error
	grpc.ServerStream
}

type snomedCTCrossMapServer struct {
	grpc.ServerStream
}

func (x *snomedCTCrossMapServer) Send(m *ReferenceSetItem) error {
	return x.ServerStream.SendMsg(m)
}

func _SnomedCT_FromCrossMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TranslateFromRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnomedCTServer).FromCrossMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/snomed.SnomedCT/FromCrossMap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnomedCTServer).FromCrossMap(ctx, req.(*TranslateFromRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SnomedCT_Map_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TranslateToRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnomedCTServer).Map(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/snomed.SnomedCT/Map",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnomedCTServer).Map(ctx, req.(*TranslateToRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SnomedCT_Subsumes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubsumptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnomedCTServer).Subsumes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/snomed.SnomedCT/Subsumes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnomedCTServer).Subsumes(ctx, req.(*SubsumptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SnomedCT_Parse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnomedCTServer).Parse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/snomed.SnomedCT/Parse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnomedCTServer).Parse(ctx, req.(*ParseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SnomedCT_Refinements_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefinementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnomedCTServer).Refinements(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/snomed.SnomedCT/Refinements",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnomedCTServer).Refinements(ctx, req.(*RefinementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SnomedCT_serviceDesc = grpc.ServiceDesc{
	ServiceName: "snomed.SnomedCT",
	HandlerType: (*SnomedCTServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetConcept",
			Handler:    _SnomedCT_GetConcept_Handler,
		},
		{
			MethodName: "GetExtendedConcept",
			Handler:    _SnomedCT_GetExtendedConcept_Handler,
		},
		{
			MethodName: "GetDescriptions",
			Handler:    _SnomedCT_GetDescriptions_Handler,
		},
		{
			MethodName: "GetDescription",
			Handler:    _SnomedCT_GetDescription_Handler,
		},
		{
			MethodName: "GetReferenceSetItem",
			Handler:    _SnomedCT_GetReferenceSetItem_Handler,
		},
		{
			MethodName: "FromCrossMap",
			Handler:    _SnomedCT_FromCrossMap_Handler,
		},
		{
			MethodName: "Map",
			Handler:    _SnomedCT_Map_Handler,
		},
		{
			MethodName: "Subsumes",
			Handler:    _SnomedCT_Subsumes_Handler,
		},
		{
			MethodName: "Parse",
			Handler:    _SnomedCT_Parse_Handler,
		},
		{
			MethodName: "Refinements",
			Handler:    _SnomedCT_Refinements_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetReferenceSets",
			Handler:       _SnomedCT_GetReferenceSets_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetAllChildren",
			Handler:       _SnomedCT_GetAllChildren_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "CrossMap",
			Handler:       _SnomedCT_CrossMap_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "server.proto",
}

// SearchClient is the client API for Search service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SearchClient interface {
	Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error)
	Extract(ctx context.Context, in *ExtractRequest, opts ...grpc.CallOption) (*ExtractResponse, error)
	Synonyms(ctx context.Context, in *SynonymRequest, opts ...grpc.CallOption) (Search_SynonymsClient, error)
}

type searchClient struct {
	cc *grpc.ClientConn
}

func NewSearchClient(cc *grpc.ClientConn) SearchClient {
	return &searchClient{cc}
}

func (c *searchClient) Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error) {
	out := new(SearchResponse)
	err := c.cc.Invoke(ctx, "/snomed.Search/Search", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchClient) Extract(ctx context.Context, in *ExtractRequest, opts ...grpc.CallOption) (*ExtractResponse, error) {
	out := new(ExtractResponse)
	err := c.cc.Invoke(ctx, "/snomed.Search/Extract", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchClient) Synonyms(ctx context.Context, in *SynonymRequest, opts ...grpc.CallOption) (Search_SynonymsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Search_serviceDesc.Streams[0], "/snomed.Search/Synonyms", opts...)
	if err != nil {
		return nil, err
	}
	x := &searchSynonymsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Search_SynonymsClient interface {
	Recv() (*SynonymResponseItem, error)
	grpc.ClientStream
}

type searchSynonymsClient struct {
	grpc.ClientStream
}

func (x *searchSynonymsClient) Recv() (*SynonymResponseItem, error) {
	m := new(SynonymResponseItem)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SearchServer is the server API for Search service.
type SearchServer interface {
	Search(context.Context, *SearchRequest) (*SearchResponse, error)
	Extract(context.Context, *ExtractRequest) (*ExtractResponse, error)
	Synonyms(*SynonymRequest, Search_SynonymsServer) error
}

func RegisterSearchServer(s *grpc.Server, srv SearchServer) {
	s.RegisterService(&_Search_serviceDesc, srv)
}

func _Search_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/snomed.Search/Search",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServer).Search(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Search_Extract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExtractRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServer).Extract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/snomed.Search/Extract",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServer).Extract(ctx, req.(*ExtractRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Search_Synonyms_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SynonymRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SearchServer).Synonyms(m, &searchSynonymsServer{stream})
}

type Search_SynonymsServer interface {
	Send(*SynonymResponseItem) error
	grpc.ServerStream
}

type searchSynonymsServer struct {
	grpc.ServerStream
}

func (x *searchSynonymsServer) Send(m *SynonymResponseItem) error {
	return x.ServerStream.SendMsg(m)
}

var _Search_serviceDesc = grpc.ServiceDesc{
	ServiceName: "snomed.Search",
	HandlerType: (*SearchServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Search",
			Handler:    _Search_Search_Handler,
		},
		{
			MethodName: "Extract",
			Handler:    _Search_Extract_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Synonyms",
			Handler:       _Search_Synonyms_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "server.proto",
}

func init() { proto.RegisterFile("server.proto", fileDescriptor_server_3c3b878a959306ae) }

var fileDescriptor_server_3c3b878a959306ae = []byte{
	// 713 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x95, 0xdd, 0x6e, 0xd3, 0x4a,
	0x10, 0xc7, 0xe5, 0x56, 0xcd, 0xc9, 0xd9, 0xf6, 0x9c, 0x9e, 0x33, 0xa1, 0x5f, 0x49, 0x0b, 0xc5,
	0x20, 0x28, 0x50, 0xe2, 0xf4, 0x83, 0x1b, 0xee, 0x68, 0x5a, 0xa2, 0x5e, 0x20, 0x55, 0x49, 0xd5,
	0x0b, 0x24, 0x68, 0x5d, 0x7b, 0xd2, 0x5a, 0xb2, 0x77, 0xdd, 0xdd, 0x4d, 0xd5, 0x50, 0xe5, 0x86,
	0x57, 0x40, 0xe2, 0x86, 0xc7, 0xe2, 0x15, 0x78, 0x10, 0x94, 0xb5, 0x37, 0x59, 0x1c, 0x27, 0xb9,
	0xb2, 0x67, 0x66, 0xf7, 0xff, 0xdb, 0x99, 0xd9, 0x0f, 0xb2, 0x20, 0x90, 0xdf, 0x22, 0xaf, 0xc6,
	0x9c, 0x49, 0x06, 0x05, 0x41, 0x59, 0x84, 0x7e, 0x79, 0x21, 0xf9, 0x26, 0xde, 0xf2, 0xfa, 0x15,
	0x63, 0x57, 0x21, 0x3a, 0x6e, 0x1c, 0x38, 0x2e, 0xa5, 0x4c, 0xba, 0x32, 0x60, 0x54, 0x24, 0x51,
	0xfb, 0x39, 0x99, 0x6b, 0x79, 0xf2, 0xf8, 0x10, 0x1e, 0x12, 0x12, 0xf8, 0x48, 0x65, 0xd0, 0x0e,
	0x90, 0xaf, 0x5a, 0x9b, 0xd6, 0xd6, 0x6c, 0xd3, 0xf0, 0xd8, 0xfb, 0x04, 0x9a, 0xd8, 0x46, 0x8e,
	0xd4, 0xc3, 0x16, 0xca, 0x63, 0x89, 0x51, 0xee, 0xac, 0xbf, 0xcd, 0x59, 0xbb, 0xdf, 0xe7, 0x49,
	0xb1, 0xa5, 0x56, 0x53, 0x3f, 0x85, 0x33, 0x42, 0x1a, 0x28, 0xeb, 0x8c, 0x7a, 0x18, 0x4b, 0xf8,
	0xa7, 0x9a, 0x2e, 0x53, 0xf1, 0xcb, 0x8b, 0xda, 0x4c, 0xe3, 0xf6, 0xd6, 0xd7, 0x9f, 0xbf, 0xbe,
	0xcd, 0xd8, 0xb0, 0xe9, 0xdc, 0xee, 0x38, 0x49, 0xcc, 0xf1, 0x92, 0x98, 0x70, 0xee, 0x87, 0x8c,
	0x1e, 0x30, 0x02, 0x0d, 0x94, 0x47, 0x77, 0x12, 0xa9, 0x8f, 0xfe, 0x18, 0xfd, 0x15, 0x6d, 0x66,
	0xc6, 0xd9, 0x3b, 0x8a, 0xf3, 0x0a, 0x5e, 0x4c, 0xe3, 0x38, 0x98, 0xce, 0x04, 0x49, 0x16, 0x1b,
	0x28, 0x0f, 0x51, 0x78, 0x3c, 0x88, 0x55, 0x35, 0xb3, 0xb4, 0x4a, 0x26, 0x1b, 0x73, 0xac, 0xfd,
	0x46, 0x11, 0x1d, 0x78, 0x3d, 0x95, 0xe8, 0x9b, 0x08, 0x46, 0xfe, 0x6b, 0xa0, 0x34, 0x9b, 0x30,
	0x82, 0x5d, 0xd5, 0x66, 0xb6, 0x55, 0x76, 0x4d, 0x31, 0x5f, 0xc2, 0xd6, 0x54, 0x26, 0xc7, 0xb6,
	0x40, 0x29, 0x6a, 0x16, 0xdc, 0x90, 0x7f, 0x1b, 0x28, 0xdf, 0x85, 0x61, 0xfd, 0x3a, 0x08, 0x7d,
	0x8e, 0x74, 0x2c, 0x2e, 0xcd, 0x72, 0x40, 0xb5, 0xf7, 0x15, 0xae, 0x0a, 0xdb, 0x53, 0x71, 0xee,
	0x50, 0xbe, 0x66, 0xc1, 0xa5, 0x42, 0x1a, 0xd5, 0xca, 0x22, 0x4b, 0xda, 0x34, 0xc6, 0xd8, 0xdb,
	0x8a, 0xf6, 0x0c, 0x9e, 0x1a, 0x34, 0xb3, 0x74, 0x7f, 0x6e, 0x97, 0x2e, 0x29, 0x65, 0xea, 0xd8,
	0xaf, 0x10, 0x94, 0xc7, 0xd5, 0x6e, 0x62, 0x5d, 0xf3, 0xd0, 0x49, 0x05, 0xcf, 0x03, 0x89, 0x51,
	0x06, 0xdd, 0x21, 0xc5, 0x3a, 0x67, 0x42, 0x7c, 0x70, 0xe3, 0x21, 0xef, 0x94, 0xbb, 0x54, 0x84,
	0xae, 0xc4, 0x53, 0xd6, 0xc4, 0x9b, 0x0e, 0x0a, 0x39, 0x81, 0x37, 0x79, 0xb7, 0xa6, 0x7f, 0xe7,
	0x81, 0xdf, 0x73, 0xbc, 0x3e, 0x28, 0x72, 0xe3, 0x9a, 0x05, 0x5d, 0xb2, 0xf0, 0x9e, 0xb3, 0x68,
	0x80, 0x5e, 0x1f, 0x41, 0xf7, 0xc3, 0x1a, 0xbe, 0x31, 0x26, 0x2a, 0x62, 0x46, 0x05, 0xe6, 0x66,
	0xac, 0x59, 0xc2, 0xb9, 0xd7, 0xc9, 0xfb, 0x3d, 0xe7, 0x5e, 0xf4, 0xe0, 0x82, 0xcc, 0x4e, 0x4b,
	0x76, 0xe4, 0xe4, 0xe7, 0x12, 0x72, 0x73, 0x8c, 0xdc, 0x18, 0x2e, 0x48, 0xb1, 0xd5, 0xb9, 0x14,
	0x9d, 0x08, 0xc5, 0x10, 0x93, 0x78, 0x54, 0xf7, 0x35, 0xa6, 0x92, 0x1b, 0x4b, 0x93, 0xaa, 0x28,
	0xe4, 0x12, 0x94, 0x0c, 0xa4, 0xd0, 0xaa, 0x67, 0x64, 0xee, 0xc4, 0xe5, 0x02, 0xe1, 0x81, 0x96,
	0x50, 0xa6, 0x16, 0x86, 0xe1, 0xcd, 0x12, 0x73, 0x14, 0xa2, 0xbf, 0x23, 0x9f, 0x28, 0xbd, 0x0d,
	0xa8, 0x18, 0x7a, 0x38, 0x08, 0x3b, 0xb1, 0x92, 0xfb, 0x42, 0xe6, 0x9b, 0xd8, 0x0e, 0x28, 0x46,
	0x48, 0xa5, 0x80, 0x35, 0xa3, 0xe9, 0xa9, 0x53, 0x23, 0xca, 0x79, 0xa1, 0x74, 0xe9, 0x93, 0x8f,
	0x9a, 0x59, 0x2d, 0x3e, 0x84, 0xed, 0xfe, 0x98, 0x21, 0x85, 0x16, 0xba, 0xdc, 0xbb, 0x86, 0xe6,
	0xe0, 0x6f, 0x69, 0x50, 0x22, 0x65, 0x6b, 0xfa, 0x72, 0xd6, 0x9d, 0x92, 0xd7, 0x14, 0xb9, 0x04,
	0xff, 0x9b, 0x45, 0x4b, 0x94, 0x3e, 0x91, 0xbf, 0x8e, 0xee, 0x24, 0x77, 0x3d, 0x09, 0xcb, 0xc6,
	0xc5, 0xdb, 0x77, 0x68, 0xd5, 0x95, 0x11, 0x7f, 0x2a, 0xfb, 0x58, 0xc9, 0x56, 0xec, 0x65, 0x43,
	0x96, 0x86, 0x71, 0xff, 0xfa, 0xed, 0x8f, 0x7b, 0x6b, 0x09, 0xf8, 0x4c, 0x8a, 0xad, 0x2e, 0x65,
	0xb4, 0x1b, 0x89, 0xa1, 0x7e, 0xea, 0x19, 0xed, 0xb7, 0xf6, 0x27, 0xfa, 0xea, 0x18, 0xe5, 0xf6,
	0x3b, 0x55, 0xac, 0x59, 0x07, 0x7b, 0xe4, 0x91, 0xc7, 0xa2, 0x2a, 0x86, 0x3e, 0x0f, 0xee, 0xaa,
	0x12, 0x79, 0x14, 0x50, 0x16, 0xb2, 0xab, 0x6e, 0xaa, 0xe9, 0xc9, 0x83, 0x42, 0x4b, 0x3d, 0xbd,
	0x27, 0xd6, 0xc7, 0xf4, 0xd9, 0xbd, 0x2c, 0xa8, 0x17, 0x75, 0xef, 0x77, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x1a, 0x3e, 0x20, 0x4b, 0x95, 0x07, 0x00, 0x00,
}
